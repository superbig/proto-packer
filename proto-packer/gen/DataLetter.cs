// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataLetter.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WS.Data {

  /// <summary>Holder for reflection information generated from DataLetter.proto</summary>
  public static partial class DataLetterReflection {

    #region Descriptor
    /// <summary>File descriptor for DataLetter.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataLetterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBEYXRhTGV0dGVyLnByb3RvEgdXUy5EYXRhIqQBCgpEYXRhTGV0dGVyEgoK",
            "AmlkGAEgASgFEg4KBmxldHRlchgCIAEoCRIMCgR0eXBlGAMgASgFEhUKDWFj",
            "dGl2ZUxldHRlcnMYBCABKAkSGAoQaG9yaXplbnRhbExpbmtJZBgFIAEoBRIW",
            "Cg52ZXJ0aWNhbExpbmtJZBgGIAEoBRIPCgdwaWVjZUlkGAcgASgFEhIKCnBp",
            "ZWNlSW5kZXgYCCABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WS.Data.DataLetter), global::WS.Data.DataLetter.Parser, new[]{ "Id", "Letter", "Type", "ActiveLetters", "HorizentalLinkId", "VerticalLinkId", "PieceId", "PieceIndex" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DataLetter : pb::IMessage<DataLetter> {
    private static readonly pb::MessageParser<DataLetter> _parser = new pb::MessageParser<DataLetter>(() => new DataLetter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataLetter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WS.Data.DataLetterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLetter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLetter(DataLetter other) : this() {
      id_ = other.id_;
      letter_ = other.letter_;
      type_ = other.type_;
      activeLetters_ = other.activeLetters_;
      horizentalLinkId_ = other.horizentalLinkId_;
      verticalLinkId_ = other.verticalLinkId_;
      pieceId_ = other.pieceId_;
      pieceIndex_ = other.pieceIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLetter Clone() {
      return new DataLetter(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///唯一标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "letter" field.</summary>
    public const int LetterFieldNumber = 2;
    private string letter_ = "";
    /// <summary>
    ///可显示字母："W","OS"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Letter {
      get { return letter_; }
      set {
        letter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///块类型：普通0、障碍1、双字单用2、双字双用3、遮罩4、可消除5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "activeLetters" field.</summary>
    public const int ActiveLettersFieldNumber = 4;
    private string activeLetters_ = "";
    /// <summary>
    ///可显示字母
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActiveLetters {
      get { return activeLetters_; }
      set {
        activeLetters_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "horizentalLinkId" field.</summary>
    public const int HorizentalLinkIdFieldNumber = 5;
    private int horizentalLinkId_;
    /// <summary>
    ///右侧链接的字母
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HorizentalLinkId {
      get { return horizentalLinkId_; }
      set {
        horizentalLinkId_ = value;
      }
    }

    /// <summary>Field number for the "verticalLinkId" field.</summary>
    public const int VerticalLinkIdFieldNumber = 6;
    private int verticalLinkId_;
    /// <summary>
    ///下侧链接的字母
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VerticalLinkId {
      get { return verticalLinkId_; }
      set {
        verticalLinkId_ = value;
      }
    }

    /// <summary>Field number for the "pieceId" field.</summary>
    public const int PieceIdFieldNumber = 7;
    private int pieceId_;
    /// <summary>
    ///所属pieceId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PieceId {
      get { return pieceId_; }
      set {
        pieceId_ = value;
      }
    }

    /// <summary>Field number for the "pieceIndex" field.</summary>
    public const int PieceIndexFieldNumber = 8;
    private int pieceIndex_;
    /// <summary>
    ///piece中的索引，一维（从左到右从上到下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PieceIndex {
      get { return pieceIndex_; }
      set {
        pieceIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataLetter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataLetter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Letter != other.Letter) return false;
      if (Type != other.Type) return false;
      if (ActiveLetters != other.ActiveLetters) return false;
      if (HorizentalLinkId != other.HorizentalLinkId) return false;
      if (VerticalLinkId != other.VerticalLinkId) return false;
      if (PieceId != other.PieceId) return false;
      if (PieceIndex != other.PieceIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Letter.Length != 0) hash ^= Letter.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ActiveLetters.Length != 0) hash ^= ActiveLetters.GetHashCode();
      if (HorizentalLinkId != 0) hash ^= HorizentalLinkId.GetHashCode();
      if (VerticalLinkId != 0) hash ^= VerticalLinkId.GetHashCode();
      if (PieceId != 0) hash ^= PieceId.GetHashCode();
      if (PieceIndex != 0) hash ^= PieceIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Letter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Letter);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (ActiveLetters.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ActiveLetters);
      }
      if (HorizentalLinkId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HorizentalLinkId);
      }
      if (VerticalLinkId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(VerticalLinkId);
      }
      if (PieceId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PieceId);
      }
      if (PieceIndex != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PieceIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Letter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Letter);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ActiveLetters.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActiveLetters);
      }
      if (HorizentalLinkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HorizentalLinkId);
      }
      if (VerticalLinkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VerticalLinkId);
      }
      if (PieceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PieceId);
      }
      if (PieceIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PieceIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataLetter other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Letter.Length != 0) {
        Letter = other.Letter;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ActiveLetters.Length != 0) {
        ActiveLetters = other.ActiveLetters;
      }
      if (other.HorizentalLinkId != 0) {
        HorizentalLinkId = other.HorizentalLinkId;
      }
      if (other.VerticalLinkId != 0) {
        VerticalLinkId = other.VerticalLinkId;
      }
      if (other.PieceId != 0) {
        PieceId = other.PieceId;
      }
      if (other.PieceIndex != 0) {
        PieceIndex = other.PieceIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Letter = input.ReadString();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 34: {
            ActiveLetters = input.ReadString();
            break;
          }
          case 40: {
            HorizentalLinkId = input.ReadInt32();
            break;
          }
          case 48: {
            VerticalLinkId = input.ReadInt32();
            break;
          }
          case 56: {
            PieceId = input.ReadInt32();
            break;
          }
          case 64: {
            PieceIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
