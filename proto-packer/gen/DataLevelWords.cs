// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataLevelWords.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WS.Data {

  /// <summary>Holder for reflection information generated from DataLevelWords.proto</summary>
  public static partial class DataLevelWordsReflection {

    #region Descriptor
    /// <summary>File descriptor for DataLevelWords.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataLevelWordsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChREYXRhTGV2ZWxXb3Jkcy5wcm90bxIHV1MuRGF0YSJbCg5EYXRhTGV2ZWxX",
            "b3JkcxIKCgJpZBgBIAEoBRIMCgRjdXRlGAIgASgJEhAKCGZyYWN0aW9uGAMg",
            "ASgFEg0KBXdvcmRzGAQgASgJEg4KBnBpZWNlcxgFIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WS.Data.DataLevelWords), global::WS.Data.DataLevelWords.Parser, new[]{ "Id", "Cute", "Fraction", "Words", "Pieces" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DataLevelWords : pb::IMessage<DataLevelWords> {
    private static readonly pb::MessageParser<DataLevelWords> _parser = new pb::MessageParser<DataLevelWords>(() => new DataLevelWords());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataLevelWords> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WS.Data.DataLevelWordsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLevelWords() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLevelWords(DataLevelWords other) : this() {
      id_ = other.id_;
      cute_ = other.cute_;
      fraction_ = other.fraction_;
      words_ = other.words_;
      pieces_ = other.pieces_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLevelWords Clone() {
      return new DataLevelWords(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///唯一标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cute" field.</summary>
    public const int CuteFieldNumber = 2;
    private string cute_ = "";
    /// <summary>
    ///提示文字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cute {
      get { return cute_; }
      set {
        cute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fraction" field.</summary>
    public const int FractionFieldNumber = 3;
    private int fraction_;
    /// <summary>
    ///分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fraction {
      get { return fraction_; }
      set {
        fraction_ = value;
      }
    }

    /// <summary>Field number for the "words" field.</summary>
    public const int WordsFieldNumber = 4;
    private string words_ = "";
    /// <summary>
    ///答案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Words {
      get { return words_; }
      set {
        words_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pieces" field.</summary>
    public const int PiecesFieldNumber = 5;
    private string pieces_ = "";
    /// <summary>
    ///包含的Pieces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pieces {
      get { return pieces_; }
      set {
        pieces_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataLevelWords);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataLevelWords other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Cute != other.Cute) return false;
      if (Fraction != other.Fraction) return false;
      if (Words != other.Words) return false;
      if (Pieces != other.Pieces) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Cute.Length != 0) hash ^= Cute.GetHashCode();
      if (Fraction != 0) hash ^= Fraction.GetHashCode();
      if (Words.Length != 0) hash ^= Words.GetHashCode();
      if (Pieces.Length != 0) hash ^= Pieces.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Cute.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cute);
      }
      if (Fraction != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Fraction);
      }
      if (Words.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Words);
      }
      if (Pieces.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Pieces);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Cute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cute);
      }
      if (Fraction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fraction);
      }
      if (Words.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Words);
      }
      if (Pieces.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pieces);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataLevelWords other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Cute.Length != 0) {
        Cute = other.Cute;
      }
      if (other.Fraction != 0) {
        Fraction = other.Fraction;
      }
      if (other.Words.Length != 0) {
        Words = other.Words;
      }
      if (other.Pieces.Length != 0) {
        Pieces = other.Pieces;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Cute = input.ReadString();
            break;
          }
          case 24: {
            Fraction = input.ReadInt32();
            break;
          }
          case 34: {
            Words = input.ReadString();
            break;
          }
          case 42: {
            Pieces = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
