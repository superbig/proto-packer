// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataLuckyBagRandomCoin.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WS.Data {

  /// <summary>Holder for reflection information generated from DataLuckyBagRandomCoin.proto</summary>
  public static partial class DataLuckyBagRandomCoinReflection {

    #region Descriptor
    /// <summary>File descriptor for DataLuckyBagRandomCoin.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataLuckyBagRandomCoinReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxEYXRhTHVja3lCYWdSYW5kb21Db2luLnByb3RvEgdXUy5EYXRhIkUKFkRh",
            "dGFMdWNreUJhZ1JhbmRvbUNvaW4SCgoCaWQYASABKAUSDwoHY29pbk51bRgC",
            "IAEoBRIOCgZ3ZWlnaHQYAyABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WS.Data.DataLuckyBagRandomCoin), global::WS.Data.DataLuckyBagRandomCoin.Parser, new[]{ "Id", "CoinNum", "Weight" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DataLuckyBagRandomCoin : pb::IMessage<DataLuckyBagRandomCoin> {
    private static readonly pb::MessageParser<DataLuckyBagRandomCoin> _parser = new pb::MessageParser<DataLuckyBagRandomCoin>(() => new DataLuckyBagRandomCoin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataLuckyBagRandomCoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WS.Data.DataLuckyBagRandomCoinReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLuckyBagRandomCoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLuckyBagRandomCoin(DataLuckyBagRandomCoin other) : this() {
      id_ = other.id_;
      coinNum_ = other.coinNum_;
      weight_ = other.weight_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLuckyBagRandomCoin Clone() {
      return new DataLuckyBagRandomCoin(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "coinNum" field.</summary>
    public const int CoinNumFieldNumber = 2;
    private int coinNum_;
    /// <summary>
    ///奖励金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CoinNum {
      get { return coinNum_; }
      set {
        coinNum_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 3;
    private int weight_;
    /// <summary>
    ///权重
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataLuckyBagRandomCoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataLuckyBagRandomCoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CoinNum != other.CoinNum) return false;
      if (Weight != other.Weight) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (CoinNum != 0) hash ^= CoinNum.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CoinNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CoinNum);
      }
      if (Weight != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Weight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (CoinNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoinNum);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataLuckyBagRandomCoin other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.CoinNum != 0) {
        CoinNum = other.CoinNum;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            CoinNum = input.ReadInt32();
            break;
          }
          case 24: {
            Weight = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
