// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataLuckyBagUserType.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WS.Data {

  /// <summary>Holder for reflection information generated from DataLuckyBagUserType.proto</summary>
  public static partial class DataLuckyBagUserTypeReflection {

    #region Descriptor
    /// <summary>File descriptor for DataLuckyBagUserType.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataLuckyBagUserTypeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpEYXRhTHVja3lCYWdVc2VyVHlwZS5wcm90bxIHV1MuRGF0YSLLAQoURGF0",
            "YUx1Y2t5QmFnVXNlclR5cGUSCgoCaWQYASABKAUSFgoOQ29zdGxvd2VyTGlt",
            "aXQYAiABKAISFgoOQ29zdFVwcGVyTGltaXQYAyABKAISEAoIVXNlckNvaW4Y",
            "BCABKAUSGQoRTGFzdExldmVsV29ybmdOdW0YBSABKAUSHQoVTGFzdFBhaWRM",
            "ZXZlbEludGVydmFsGAYgASgFEhEKCVBhc3NUaW1lcxgHIAEoBRIYChBMYXN0",
            "U2hvd0ludGVydmFsGAggASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WS.Data.DataLuckyBagUserType), global::WS.Data.DataLuckyBagUserType.Parser, new[]{ "Id", "CostlowerLimit", "CostUpperLimit", "UserCoin", "LastLevelWorngNum", "LastPaidLevelInterval", "PassTimes", "LastShowInterval" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DataLuckyBagUserType : pb::IMessage<DataLuckyBagUserType> {
    private static readonly pb::MessageParser<DataLuckyBagUserType> _parser = new pb::MessageParser<DataLuckyBagUserType>(() => new DataLuckyBagUserType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataLuckyBagUserType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WS.Data.DataLuckyBagUserTypeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLuckyBagUserType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLuckyBagUserType(DataLuckyBagUserType other) : this() {
      id_ = other.id_;
      costlowerLimit_ = other.costlowerLimit_;
      costUpperLimit_ = other.costUpperLimit_;
      userCoin_ = other.userCoin_;
      lastLevelWorngNum_ = other.lastLevelWorngNum_;
      lastPaidLevelInterval_ = other.lastPaidLevelInterval_;
      passTimes_ = other.passTimes_;
      lastShowInterval_ = other.lastShowInterval_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLuckyBagUserType Clone() {
      return new DataLuckyBagUserType(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "CostlowerLimit" field.</summary>
    public const int CostlowerLimitFieldNumber = 2;
    private float costlowerLimit_;
    /// <summary>
    ///消费下限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CostlowerLimit {
      get { return costlowerLimit_; }
      set {
        costlowerLimit_ = value;
      }
    }

    /// <summary>Field number for the "CostUpperLimit" field.</summary>
    public const int CostUpperLimitFieldNumber = 3;
    private float costUpperLimit_;
    /// <summary>
    ///消费上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CostUpperLimit {
      get { return costUpperLimit_; }
      set {
        costUpperLimit_ = value;
      }
    }

    /// <summary>Field number for the "UserCoin" field.</summary>
    public const int UserCoinFieldNumber = 4;
    private int userCoin_;
    /// <summary>
    ///用户库存金币(&lt;)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserCoin {
      get { return userCoin_; }
      set {
        userCoin_ = value;
      }
    }

    /// <summary>Field number for the "LastLevelWorngNum" field.</summary>
    public const int LastLevelWorngNumFieldNumber = 5;
    private int lastLevelWorngNum_;
    /// <summary>
    ///上一关接错次数(>)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastLevelWorngNum {
      get { return lastLevelWorngNum_; }
      set {
        lastLevelWorngNum_ = value;
      }
    }

    /// <summary>Field number for the "LastPaidLevelInterval" field.</summary>
    public const int LastPaidLevelIntervalFieldNumber = 6;
    private int lastPaidLevelInterval_;
    /// <summary>
    ///距离上次关卡付费间隔（-1不参考 >）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastPaidLevelInterval {
      get { return lastPaidLevelInterval_; }
      set {
        lastPaidLevelInterval_ = value;
      }
    }

    /// <summary>Field number for the "PassTimes" field.</summary>
    public const int PassTimesFieldNumber = 7;
    private int passTimes_;
    /// <summary>
    ///过关次数（-1不参考 >）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassTimes {
      get { return passTimes_; }
      set {
        passTimes_ = value;
      }
    }

    /// <summary>Field number for the "LastShowInterval" field.</summary>
    public const int LastShowIntervalFieldNumber = 8;
    private int lastShowInterval_;
    /// <summary>
    ///距离上一次展示间隔天数（>=）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastShowInterval {
      get { return lastShowInterval_; }
      set {
        lastShowInterval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataLuckyBagUserType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataLuckyBagUserType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CostlowerLimit != other.CostlowerLimit) return false;
      if (CostUpperLimit != other.CostUpperLimit) return false;
      if (UserCoin != other.UserCoin) return false;
      if (LastLevelWorngNum != other.LastLevelWorngNum) return false;
      if (LastPaidLevelInterval != other.LastPaidLevelInterval) return false;
      if (PassTimes != other.PassTimes) return false;
      if (LastShowInterval != other.LastShowInterval) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (CostlowerLimit != 0F) hash ^= CostlowerLimit.GetHashCode();
      if (CostUpperLimit != 0F) hash ^= CostUpperLimit.GetHashCode();
      if (UserCoin != 0) hash ^= UserCoin.GetHashCode();
      if (LastLevelWorngNum != 0) hash ^= LastLevelWorngNum.GetHashCode();
      if (LastPaidLevelInterval != 0) hash ^= LastPaidLevelInterval.GetHashCode();
      if (PassTimes != 0) hash ^= PassTimes.GetHashCode();
      if (LastShowInterval != 0) hash ^= LastShowInterval.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CostlowerLimit != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(CostlowerLimit);
      }
      if (CostUpperLimit != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(CostUpperLimit);
      }
      if (UserCoin != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UserCoin);
      }
      if (LastLevelWorngNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LastLevelWorngNum);
      }
      if (LastPaidLevelInterval != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LastPaidLevelInterval);
      }
      if (PassTimes != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PassTimes);
      }
      if (LastShowInterval != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LastShowInterval);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (CostlowerLimit != 0F) {
        size += 1 + 4;
      }
      if (CostUpperLimit != 0F) {
        size += 1 + 4;
      }
      if (UserCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserCoin);
      }
      if (LastLevelWorngNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastLevelWorngNum);
      }
      if (LastPaidLevelInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastPaidLevelInterval);
      }
      if (PassTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassTimes);
      }
      if (LastShowInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastShowInterval);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataLuckyBagUserType other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.CostlowerLimit != 0F) {
        CostlowerLimit = other.CostlowerLimit;
      }
      if (other.CostUpperLimit != 0F) {
        CostUpperLimit = other.CostUpperLimit;
      }
      if (other.UserCoin != 0) {
        UserCoin = other.UserCoin;
      }
      if (other.LastLevelWorngNum != 0) {
        LastLevelWorngNum = other.LastLevelWorngNum;
      }
      if (other.LastPaidLevelInterval != 0) {
        LastPaidLevelInterval = other.LastPaidLevelInterval;
      }
      if (other.PassTimes != 0) {
        PassTimes = other.PassTimes;
      }
      if (other.LastShowInterval != 0) {
        LastShowInterval = other.LastShowInterval;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 21: {
            CostlowerLimit = input.ReadFloat();
            break;
          }
          case 29: {
            CostUpperLimit = input.ReadFloat();
            break;
          }
          case 32: {
            UserCoin = input.ReadInt32();
            break;
          }
          case 40: {
            LastLevelWorngNum = input.ReadInt32();
            break;
          }
          case 48: {
            LastPaidLevelInterval = input.ReadInt32();
            break;
          }
          case 56: {
            PassTimes = input.ReadInt32();
            break;
          }
          case 64: {
            LastShowInterval = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
