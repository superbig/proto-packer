// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataSignIn.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WS.Data {

  /// <summary>Holder for reflection information generated from DataSignIn.proto</summary>
  public static partial class DataSignInReflection {

    #region Descriptor
    /// <summary>File descriptor for DataSignIn.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataSignInReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBEYXRhU2lnbkluLnByb3RvEgdXUy5EYXRhInIKCkRhdGFTaWduSW4SCgoC",
            "aWQYASABKAUSCwoDZGF5GAIgASgFEg0KBWNvaW5zGAMgASgFEg4KBnNpbmds",
            "ZRgEIAEoBRINCgVtZXJnZRgFIAEoBRIMCgRoaW50GAYgASgFEg8KB2FkY29p",
            "bnMYByABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WS.Data.DataSignIn), global::WS.Data.DataSignIn.Parser, new[]{ "Id", "Day", "Coins", "Single", "Merge", "Hint", "Adcoins" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DataSignIn : pb::IMessage<DataSignIn> {
    private static readonly pb::MessageParser<DataSignIn> _parser = new pb::MessageParser<DataSignIn>(() => new DataSignIn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataSignIn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WS.Data.DataSignInReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSignIn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSignIn(DataSignIn other) : this() {
      id_ = other.id_;
      day_ = other.day_;
      coins_ = other.coins_;
      single_ = other.single_;
      merge_ = other.merge_;
      hint_ = other.hint_;
      adcoins_ = other.adcoins_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSignIn Clone() {
      return new DataSignIn(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///唯一表示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 2;
    private int day_;
    /// <summary>
    ///第几天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "coins" field.</summary>
    public const int CoinsFieldNumber = 3;
    private int coins_;
    /// <summary>
    ///金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coins {
      get { return coins_; }
      set {
        coins_ = value;
      }
    }

    /// <summary>Field number for the "single" field.</summary>
    public const int SingleFieldNumber = 4;
    private int single_;
    /// <summary>
    ///单选限时道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Single {
      get { return single_; }
      set {
        single_ = value;
      }
    }

    /// <summary>Field number for the "merge" field.</summary>
    public const int MergeFieldNumber = 5;
    private int merge_;
    /// <summary>
    ///合并限时道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Merge {
      get { return merge_; }
      set {
        merge_ = value;
      }
    }

    /// <summary>Field number for the "hint" field.</summary>
    public const int HintFieldNumber = 6;
    private int hint_;
    /// <summary>
    ///提示限时道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hint {
      get { return hint_; }
      set {
        hint_ = value;
      }
    }

    /// <summary>Field number for the "adcoins" field.</summary>
    public const int AdcoinsFieldNumber = 7;
    private int adcoins_;
    /// <summary>
    ///广告获得金币数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Adcoins {
      get { return adcoins_; }
      set {
        adcoins_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataSignIn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataSignIn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Day != other.Day) return false;
      if (Coins != other.Coins) return false;
      if (Single != other.Single) return false;
      if (Merge != other.Merge) return false;
      if (Hint != other.Hint) return false;
      if (Adcoins != other.Adcoins) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Coins != 0) hash ^= Coins.GetHashCode();
      if (Single != 0) hash ^= Single.GetHashCode();
      if (Merge != 0) hash ^= Merge.GetHashCode();
      if (Hint != 0) hash ^= Hint.GetHashCode();
      if (Adcoins != 0) hash ^= Adcoins.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Day != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Day);
      }
      if (Coins != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Coins);
      }
      if (Single != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Single);
      }
      if (Merge != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Merge);
      }
      if (Hint != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Hint);
      }
      if (Adcoins != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Adcoins);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Coins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coins);
      }
      if (Single != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Single);
      }
      if (Merge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Merge);
      }
      if (Hint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hint);
      }
      if (Adcoins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Adcoins);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataSignIn other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Coins != 0) {
        Coins = other.Coins;
      }
      if (other.Single != 0) {
        Single = other.Single;
      }
      if (other.Merge != 0) {
        Merge = other.Merge;
      }
      if (other.Hint != 0) {
        Hint = other.Hint;
      }
      if (other.Adcoins != 0) {
        Adcoins = other.Adcoins;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Day = input.ReadInt32();
            break;
          }
          case 24: {
            Coins = input.ReadInt32();
            break;
          }
          case 32: {
            Single = input.ReadInt32();
            break;
          }
          case 40: {
            Merge = input.ReadInt32();
            break;
          }
          case 48: {
            Hint = input.ReadInt32();
            break;
          }
          case 56: {
            Adcoins = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
