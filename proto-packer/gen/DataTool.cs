// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataTool.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WS.Data {

  /// <summary>Holder for reflection information generated from DataTool.proto</summary>
  public static partial class DataToolReflection {

    #region Descriptor
    /// <summary>File descriptor for DataTool.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataToolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5EYXRhVG9vbC5wcm90bxIHV1MuRGF0YSJqCghEYXRhVG9vbBIKCgJpZBgB",
            "IAEoBRIQCghzaG93TmFtZRgCIAEoCRIQCghzaG93SWNvbhgDIAEoCRIMCgR0",
            "eXBlGAQgASgFEhEKCW9wZW5MZXZlbBgFIAEoBRINCgVjb3N0cxgGIAEoBWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WS.Data.DataTool), global::WS.Data.DataTool.Parser, new[]{ "Id", "ShowName", "ShowIcon", "Type", "OpenLevel", "Costs" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DataTool : pb::IMessage<DataTool> {
    private static readonly pb::MessageParser<DataTool> _parser = new pb::MessageParser<DataTool>(() => new DataTool());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataTool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WS.Data.DataToolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataTool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataTool(DataTool other) : this() {
      id_ = other.id_;
      showName_ = other.showName_;
      showIcon_ = other.showIcon_;
      type_ = other.type_;
      openLevel_ = other.openLevel_;
      costs_ = other.costs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataTool Clone() {
      return new DataTool(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///唯一标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "showName" field.</summary>
    public const int ShowNameFieldNumber = 2;
    private string showName_ = "";
    /// <summary>
    ///显示名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShowName {
      get { return showName_; }
      set {
        showName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "showIcon" field.</summary>
    public const int ShowIconFieldNumber = 3;
    private string showIcon_ = "";
    /// <summary>
    ///显示图片
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShowIcon {
      get { return showIcon_; }
      set {
        showIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "openLevel" field.</summary>
    public const int OpenLevelFieldNumber = 5;
    private int openLevel_;
    /// <summary>
    ///开放等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenLevel {
      get { return openLevel_; }
      set {
        openLevel_ = value;
      }
    }

    /// <summary>Field number for the "costs" field.</summary>
    public const int CostsFieldNumber = 6;
    private int costs_;
    /// <summary>
    ///消耗金币数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Costs {
      get { return costs_; }
      set {
        costs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataTool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataTool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ShowName != other.ShowName) return false;
      if (ShowIcon != other.ShowIcon) return false;
      if (Type != other.Type) return false;
      if (OpenLevel != other.OpenLevel) return false;
      if (Costs != other.Costs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ShowName.Length != 0) hash ^= ShowName.GetHashCode();
      if (ShowIcon.Length != 0) hash ^= ShowIcon.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (OpenLevel != 0) hash ^= OpenLevel.GetHashCode();
      if (Costs != 0) hash ^= Costs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ShowName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShowName);
      }
      if (ShowIcon.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ShowIcon);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (OpenLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OpenLevel);
      }
      if (Costs != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Costs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ShowName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowName);
      }
      if (ShowIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowIcon);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (OpenLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenLevel);
      }
      if (Costs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Costs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataTool other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ShowName.Length != 0) {
        ShowName = other.ShowName;
      }
      if (other.ShowIcon.Length != 0) {
        ShowIcon = other.ShowIcon;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.OpenLevel != 0) {
        OpenLevel = other.OpenLevel;
      }
      if (other.Costs != 0) {
        Costs = other.Costs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            ShowName = input.ReadString();
            break;
          }
          case 26: {
            ShowIcon = input.ReadString();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 40: {
            OpenLevel = input.ReadInt32();
            break;
          }
          case 48: {
            Costs = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
